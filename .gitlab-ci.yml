stages:         
  - build
  - test
  - sonarqube
  - security_scan
  - dockerize
  - deploy


api_gateway_build:
  stage: build
  script:
    - cd "api gateway"
    - ./gradlew build

# api_gateway_test:
#   stage: test
#   script:
#     - cd "api gateway"
#     - ./gradlew test

api_gateway_deployment:
  stage: deploy
  script:
    - echo "Deploying application..."
    - cd "api gateway"
    - ./gradlew clean build -x test
    - docker build -t europe-west1-docker.pkg.dev/d-com-437216/cluster-repo/api-gateway .
    - docker push europe-west1-docker.pkg.dev/d-com-437216/cluster-repo/api-gateway
    - kubectl delete deployment api-gateway --ignore-not-found=true
    - kubectl apply -f api-gateway-deployment.yaml

# api_gateway_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "api gateway"
#     - ./gradlew sonar

# snyk_scan_api_gateway:
#   stage: security_scan
#   script:
#     - Remove-Item -Path "${CI_PROJECT_DIR}\api gateway\gradlew" -Force
#     - Remove-Item -Path "${CI_PROJECT_DIR}\api gateway\gradle" -Recurse -Force
#     - docker run --rm -v "${CI_PROJECT_DIR}/api gateway:/app" -e SNYK_TOKEN=$env:SNYK_TOKEN snyk/snyk:gradle-jdk21
#   allow_failure: true
#   artifacts:
#     paths:
#       - snyk_report.json
#   only:
#     - develop


# owasp_zap_scan_api_gateway:
#   stage: security_scan
#   script:
#     - docker run --rm -v "${CI_PROJECT_DIR}:/zap/wrk/:rw" -t ghcr.io/zaproxy/zaproxy:nightly zap-baseline.py -t $SERVICE_URL -g gen.conf -r report.html
#   allow_failure: true
#   artifacts:
#     paths:
#       - report.html
#   only:
#     - develop

# authentication_build:
#   stage: build
#   script:
#     - cd "Authentication Service"
#     - ./gradlew build

# authentication_test:
#   stage: test
#   script:
#     - cd "Authentication Service"
#     - ./gradlew test

# authentication_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "Authentication Service"
#     - ./gradlew sonarqube


# cave_service_build:
#   stage: build
#   script:
#     - cd "Cave Service"
#     - ./gradlew build

# cave_service_test:
#   stage: test
#   script:
#     - cd "Cave Service"
#     - ./gradlew test

# cave_service_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "Cave Service"
#     - ./gradlew sonarqube

# media_service_build:
#   stage: build
#   script:
#     - cd "Media Service"
#     - ./gradlew build

# media_service_test:
#   stage: test
#   script:
#     - cd "Media Service"
#     - ./gradlew test

# media_service_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "Media Service"
#     - ./gradlew sonarqube

# messaging_service_build:
#   stage: build
#   script:
#     - cd "Messaging Service"
#     - ./gradlew build

# messaging_service_test:
#   stage: test
#   script:
#     - cd "Messaging Service"
#     - ./gradlew test

# messaging_service_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "Messaging Service"
#     - ./gradlew sonarqube

# notification_service_build:
#   stage: build
#   script:
#     - cd "Notification Service"
#     - ./gradlew build

# notification_service_test:
#   stage: test
#   script:
#     - cd "Notification Service"
#     - ./gradlew test

# notification_service_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "Notification Service"
#     - ./gradlew sonarqube

# deploy-job:      
#   stage: deploy 
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."

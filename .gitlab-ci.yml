stages:         
  - build
  - test
  - sonarqube
  - dockerize
  - deploy
  - security_scan


api_gateway_build:
  stage: build
  script:
    - cd "api gateway"
    - ./gradlew build

api_gateway_test:
  stage: test
  script:
    - cd "api gateway"
    - ./gradlew test

snyk_scan_api_gateway:
  stage: security_scan
  script:
    - Remove-Item -Path "${CI_PROJECT_DIR}\api gateway\gradlew" -Force
    - Remove-Item -Path "${CI_PROJECT_DIR}\api gateway\gradle" -Recurse -Force
    - docker run --rm -v "${CI_PROJECT_DIR}/api gateway:/app" -e SNYK_TOKEN=$env:SNYK_TOKEN snyk/snyk:gradle-jdk21
  allow_failure: true
  artifacts:
    paths:
      - snyk_report.json
  only:
    - develop


owasp_zap_scan_api_gateway:
  stage: security_scan
  script:
    - docker run -v "${pwd}":/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t http://localhost:8080 -g gen.conf -r report.html
  allow_failure: true
  artifacts:
    paths:
      - report.html
  only:
    - develop

# api_gateway_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "api gateway"
#     - ./gradlew sonarqube

# authentication_build:
#   stage: build
#   script:
#     - cd "Authentication Service"
#     - ./gradlew build

# authentication_test:
#   stage: test
#   script:
#     - cd "Authentication Service"
#     - ./gradlew test

# authentication_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "Authentication Service"
#     - ./gradlew sonarqube


# cave_service_build:
#   stage: build
#   script:
#     - cd "Cave Service"
#     - ./gradlew build

# cave_service_test:
#   stage: test
#   script:
#     - cd "Cave Service"
#     - ./gradlew test

# cave_service_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "Cave Service"
#     - ./gradlew sonarqube

# media_service_build:
#   stage: build
#   script:
#     - cd "Media Service"
#     - ./gradlew build

# media_service_test:
#   stage: test
#   script:
#     - cd "Media Service"
#     - ./gradlew test

# media_service_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "Media Service"
#     - ./gradlew sonarqube

# messaging_service_build:
#   stage: build
#   script:
#     - cd "Messaging Service"
#     - ./gradlew build

# messaging_service_test:
#   stage: test
#   script:
#     - cd "Messaging Service"
#     - ./gradlew test

# messaging_service_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "Messaging Service"
#     - ./gradlew sonarqube

# notification_service_build:
#   stage: build
#   script:
#     - cd "Notification Service"
#     - ./gradlew build

# notification_service_test:
#   stage: test
#   script:
#     - cd "Notification Service"
#     - ./gradlew test

# notification_service_sonarqube:
#   stage: sonarqube
#   script:
#     - cd "Notification Service"
#     - ./gradlew sonarqube

# deploy-job:      
#   stage: deploy 
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
